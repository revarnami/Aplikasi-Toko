/**
 * loopback-boilerplate
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AccessToken".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccessToken>>(){}.getType();
    }
    
    if ("Adjustment".equalsIgnoreCase(className)) {
      return new TypeToken<List<Adjustment>>(){}.getType();
    }
    
    if ("AdjustmentDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<AdjustmentDetail>>(){}.getType();
    }
    
    if ("Branch".equalsIgnoreCase(className)) {
      return new TypeToken<List<Branch>>(){}.getType();
    }
    
    if ("Company".equalsIgnoreCase(className)) {
      return new TypeToken<List<Company>>(){}.getType();
    }
    
    if ("Customer".equalsIgnoreCase(className)) {
      return new TypeToken<List<Customer>>(){}.getType();
    }
    
    if ("Delivery".equalsIgnoreCase(className)) {
      return new TypeToken<List<Delivery>>(){}.getType();
    }
    
    if ("DeliveryDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<DeliveryDetail>>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse200>>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001>>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2002>>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2003>>(){}.getType();
    }
    
    if ("Item".equalsIgnoreCase(className)) {
      return new TypeToken<List<Item>>(){}.getType();
    }
    
    if ("ItemCategory".equalsIgnoreCase(className)) {
      return new TypeToken<List<ItemCategory>>(){}.getType();
    }
    
    if ("ItemVariant".equalsIgnoreCase(className)) {
      return new TypeToken<List<ItemVariant>>(){}.getType();
    }
    
    if ("ItemVariantOut".equalsIgnoreCase(className)) {
      return new TypeToken<List<ItemVariantOut>>(){}.getType();
    }
    
    if ("ItemVariantStock".equalsIgnoreCase(className)) {
      return new TypeToken<List<ItemVariantStock>>(){}.getType();
    }
    
    if ("LogStockAdjustment".equalsIgnoreCase(className)) {
      return new TypeToken<List<LogStockAdjustment>>(){}.getType();
    }
    
    if ("LogStockDelivery".equalsIgnoreCase(className)) {
      return new TypeToken<List<LogStockDelivery>>(){}.getType();
    }
    
    if ("LogStockItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<LogStockItem>>(){}.getType();
    }
    
    if ("LogStockPurchase".equalsIgnoreCase(className)) {
      return new TypeToken<List<LogStockPurchase>>(){}.getType();
    }
    
    if ("LogStockSale".equalsIgnoreCase(className)) {
      return new TypeToken<List<LogStockSale>>(){}.getType();
    }
    
    if ("LogTransactionPaymentDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<LogTransactionPaymentDetail>>(){}.getType();
    }
    
    if ("LogTransactionSale".equalsIgnoreCase(className)) {
      return new TypeToken<List<LogTransactionSale>>(){}.getType();
    }
    
    if ("Purchase".equalsIgnoreCase(className)) {
      return new TypeToken<List<Purchase>>(){}.getType();
    }
    
    if ("PurchaseDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<PurchaseDetail>>(){}.getType();
    }
    
    if ("Receivable".equalsIgnoreCase(className)) {
      return new TypeToken<List<Receivable>>(){}.getType();
    }
    
    if ("ReceivablePayment".equalsIgnoreCase(className)) {
      return new TypeToken<List<ReceivablePayment>>(){}.getType();
    }
    
    if ("ReceivablePaymentDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<ReceivablePaymentDetail>>(){}.getType();
    }
    
    if ("Sale".equalsIgnoreCase(className)) {
      return new TypeToken<List<Sale>>(){}.getType();
    }
    
    if ("SaleDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<SaleDetail>>(){}.getType();
    }
    
    if ("SaleDetailProfit".equalsIgnoreCase(className)) {
      return new TypeToken<List<SaleDetailProfit>>(){}.getType();
    }
    
    if ("SaleProfit".equalsIgnoreCase(className)) {
      return new TypeToken<List<SaleProfit>>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<List<User>>(){}.getType();
    }
    
    if ("UserInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserInfo>>(){}.getType();
    }
    
    if ("XAny".equalsIgnoreCase(className)) {
      return new TypeToken<List<XAny>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AccessToken".equalsIgnoreCase(className)) {
      return new TypeToken<AccessToken>(){}.getType();
    }
    
    if ("Adjustment".equalsIgnoreCase(className)) {
      return new TypeToken<Adjustment>(){}.getType();
    }
    
    if ("AdjustmentDetail".equalsIgnoreCase(className)) {
      return new TypeToken<AdjustmentDetail>(){}.getType();
    }
    
    if ("Branch".equalsIgnoreCase(className)) {
      return new TypeToken<Branch>(){}.getType();
    }
    
    if ("Company".equalsIgnoreCase(className)) {
      return new TypeToken<Company>(){}.getType();
    }
    
    if ("Customer".equalsIgnoreCase(className)) {
      return new TypeToken<Customer>(){}.getType();
    }
    
    if ("Delivery".equalsIgnoreCase(className)) {
      return new TypeToken<Delivery>(){}.getType();
    }
    
    if ("DeliveryDetail".equalsIgnoreCase(className)) {
      return new TypeToken<DeliveryDetail>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse200>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2002>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2003>(){}.getType();
    }
    
    if ("Item".equalsIgnoreCase(className)) {
      return new TypeToken<Item>(){}.getType();
    }
    
    if ("ItemCategory".equalsIgnoreCase(className)) {
      return new TypeToken<ItemCategory>(){}.getType();
    }
    
    if ("ItemVariant".equalsIgnoreCase(className)) {
      return new TypeToken<ItemVariant>(){}.getType();
    }
    
    if ("ItemVariantOut".equalsIgnoreCase(className)) {
      return new TypeToken<ItemVariantOut>(){}.getType();
    }
    
    if ("ItemVariantStock".equalsIgnoreCase(className)) {
      return new TypeToken<ItemVariantStock>(){}.getType();
    }
    
    if ("LogStockAdjustment".equalsIgnoreCase(className)) {
      return new TypeToken<LogStockAdjustment>(){}.getType();
    }
    
    if ("LogStockDelivery".equalsIgnoreCase(className)) {
      return new TypeToken<LogStockDelivery>(){}.getType();
    }
    
    if ("LogStockItem".equalsIgnoreCase(className)) {
      return new TypeToken<LogStockItem>(){}.getType();
    }
    
    if ("LogStockPurchase".equalsIgnoreCase(className)) {
      return new TypeToken<LogStockPurchase>(){}.getType();
    }
    
    if ("LogStockSale".equalsIgnoreCase(className)) {
      return new TypeToken<LogStockSale>(){}.getType();
    }
    
    if ("LogTransactionPaymentDetail".equalsIgnoreCase(className)) {
      return new TypeToken<LogTransactionPaymentDetail>(){}.getType();
    }
    
    if ("LogTransactionSale".equalsIgnoreCase(className)) {
      return new TypeToken<LogTransactionSale>(){}.getType();
    }
    
    if ("Purchase".equalsIgnoreCase(className)) {
      return new TypeToken<Purchase>(){}.getType();
    }
    
    if ("PurchaseDetail".equalsIgnoreCase(className)) {
      return new TypeToken<PurchaseDetail>(){}.getType();
    }
    
    if ("Receivable".equalsIgnoreCase(className)) {
      return new TypeToken<Receivable>(){}.getType();
    }
    
    if ("ReceivablePayment".equalsIgnoreCase(className)) {
      return new TypeToken<ReceivablePayment>(){}.getType();
    }
    
    if ("ReceivablePaymentDetail".equalsIgnoreCase(className)) {
      return new TypeToken<ReceivablePaymentDetail>(){}.getType();
    }
    
    if ("Sale".equalsIgnoreCase(className)) {
      return new TypeToken<Sale>(){}.getType();
    }
    
    if ("SaleDetail".equalsIgnoreCase(className)) {
      return new TypeToken<SaleDetail>(){}.getType();
    }
    
    if ("SaleDetailProfit".equalsIgnoreCase(className)) {
      return new TypeToken<SaleDetailProfit>(){}.getType();
    }
    
    if ("SaleProfit".equalsIgnoreCase(className)) {
      return new TypeToken<SaleProfit>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<User>(){}.getType();
    }
    
    if ("UserInfo".equalsIgnoreCase(className)) {
      return new TypeToken<UserInfo>(){}.getType();
    }
    
    if ("XAny".equalsIgnoreCase(className)) {
      return new TypeToken<XAny>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
